package olivetv

import (
	"errors"
	"fmt"
	"net/http"
	"regexp"
	"strings"
	"time"

	"github.com/imroc/req/v3"
)

func init() {
	registerSite("tiktok", &tiktok{})
}

type tiktok struct {
	base
}

func (this *tiktok) Name() string {
	return "tiktok"
}

func (this *tiktok) Snap(tv *TV) error {
	tv.Info = &Info{
		Timestamp: time.Now().Unix(),
	}
	return this.set(tv)
}

func (this *tiktok) set(tv *TV) error {
	liveURL := fmt.Sprintf("https://www.tiktok.com/@%s/live", tv.RoomID)
	resp, err := req.C().SetProxyURL(tv.proxy).R().
		SetHeaders(map[string]string{
			"Referer":    liveURL,
			"User_Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36",
		}).
		Get(liveURL)
	if err != nil {
		return err
	}
	if resp.GetStatusCode() != http.StatusOK {
		return errors.New("tiktok: network not available " + resp.GetStatus())
	}
	res := regexp.MustCompile(`room_id=(.*?)"/>`).FindStringSubmatch(resp.String())
	if len(res) < 1 {
		return errors.New("tiktok: failed to find roomID")
	}
	roomID := res[1]

	var ag TiktokAutoGenerated
	_, err = req.C().R().
		SetHeaders(map[string]string{
			"User_Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36", "Referer": "https://www.tiktok.com/",
		}).
		SetQueryParam("room_id", roomID).
		SetSuccessResult(&ag).
		Get("https://webcast.tiktok.com/webcast/room/info/?aid=1988")
	if err != nil {
		return err
	}
	data := ag.Data
	tv.roomName = data.Title
	tv.streamerName = data.Owner.Nickname

	candi := []string{
		data.StreamURL.FlvPullURL.FullHd1,
		data.StreamURL.FlvPullURL.Hd1,
		data.StreamURL.FlvPullURL.Sd1,
		data.StreamURL.FlvPullURL.Sd2,
	}
	var streamURL string
	streamURL = data.StreamURL.RtmpPullURL
	for _, v := range candi {
		if streamURL != "" {
			break
		}
		if v != "" {
			streamURL = v
			break
		}
	}

	if streamURL != "" {
		tv.roomOn = true
		tv.streamURL = streamURL
	}
	if tv.roomName == "" {
		tv.roomName = tv.RoomID
	}

	return nil
}

type TiktokAutoGenerated struct {
	Data struct {
		Status int    `json:"status"`
		Title  string `json:"title"`
		Owner  struct {
			Nickname string `json:"nickname"`
		} `json:"owner"`
		StreamURL struct {
			RtmpPullURL string `json:"rtmp_pull_url"`
			FlvPullURL  struct {
				FullHd1 string `json:"FULL_HD1"`
				Hd1     string `json:"HD1"`
				Sd1     string `json:"SD1"`
				Sd2     string `json:"SD2"`
			} `json:"flv_pull_url"`
			HlsPullURL string `json:"hls_pull_url"`
		} `json:"stream_url"`
	} `json:"data"`
}

// Permit parse the stream url to get streamer info.
// eg. https://www.tiktok.com/@maki_1414
func (this *tiktok) Permit(roomURL RoomURL) (*TV, error) {
	roomURL = RoomURL(strings.TrimSuffix(string(roomURL), "/live"))
	tv, error := this.base.Permit(roomURL)
	if error != nil {
		return nil, error
	}
	tv.RoomID = strings.TrimPrefix(tv.RoomID, "@")
	return tv, nil
}
